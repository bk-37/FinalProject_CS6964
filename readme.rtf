# Cell Image Classification — Final Project

## 🧬 Overview
This project tackles the classification of microscopic cell images using both traditional machine learning and deep learning models. We compare the performance of models trained on grayscale (50×50) and colored (128×128) images, leveraging techniques ranging from **Random Forests** to **Convolutional Neural Networks (CNNs)**.

The goal is to identify which model and preprocessing pipeline yields the most accurate classification performance on the given dataset.

---

## 📁 Dataset
- Microscopy images of labeled cells
- Two versions created:
  - **Grayscale images (50×50)**
  - **Colored images (128×128)**
- Labels correspond to distinct cell types or classification categories

---

## 🔧 Methods & Tools

### 🖼️ Preprocessing
- Converted raw microscopy data into:
  - Grayscale arrays
  - RGB-colored arrays
- Normalized pixel values
- Reshaped and flattened images where needed

### 📊 Models Implemented
| Model | Description |
|-------|-------------|
| `RandomForestClassifier` | Tree-based ensemble method for baseline comparison |
| `LogisticRegression` | Simple linear classifier for flat image vectors |
| `Support Vector Machine` | High-dimensional classifier with RBF kernel |
| `CNN` (Keras) | Deep neural network using Conv2D, MaxPooling, and Dense layers |

### 🧪 Evaluation
- Accuracy metrics for each model
- Visualizations of predictions and errors
- Final comparison table summarizing model performance

---

## 📉 Sample Pipeline
1. Load raw cell image data
2. Convert to grayscale and/or color arrays
3. Split data into training and test sets
4. Train models and evaluate results
5. Build summary table for comparison

---

## 📌 Results Summary

| Model | Input Type | Accuracy |
|-------|------------|----------|
| Random Forest | Grayscale | ~XX% |
| Logistic Regression | Grayscale | ~XX% |
| SVM | Grayscale | ~XX% |
| CNN | Color | ~XX% |

> *Note: Replace `XX%` with your actual accuracy results.*

---

## 🛠️ Tech Stack
- Python
- NumPy, pandas
- scikit-learn
- Keras / TensorFlow
- Matplotlib, Seaborn

---

## ✍️ Authors
**Brian Keller**  
**Wyatt Young**
**Felipe Marin**
University of Utah

---

## 🔒 License
For educational and academic use only.
